var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = VEM","category":"page"},{"location":"#VEM","page":"Home","title":"VEM","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Vortex Element Method library for computational fluid dynamics based on the evolution of vorticity","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [VEM]","category":"page"},{"location":"#VEM.VortexBlobs","page":"Home","title":"VEM.VortexBlobs","text":"VortexBlobs{Dimension, ScalarType<:AbstractFloat, CirculationType<:Union{ScalarType, SVector{Dimension, ScalarType}}}\n\nConstruct a distribution of 2D or 3D blobs.\n\nThe state of the distribution is completely specified by three properties:\n\nThe circulation carried by the blobs: circulation\nThe core radius of the blobs: radius\nThe coordinates of the blobs: source\n\nNote that circulation is a scalar in 2D and a 3-vector in 3D.\n\nExample\n\nConstruct a distribution of two 2D blobs:\n\nusing StaticArrays\nusing VEM\n\ncirculation = [1.23, 4.56]\nradius = [0.45, 0.67]\nsource = [SVector(0.0, 0.0), SVector(0.1, 0.1)]\n\nblobs = VortexBlobs(circulation, radius, source)\n\nConstruct a distribution of 3D blobs:\n\n using StaticArrays\n using VEM\n \n circulation = [SVector(1.23, 4.56, 7.89), SVector(3.21, 6.54, 9.87)]\n radius = [0.54, 0.67]\n source = [SVector(0.0, 0.0, 0.0), SVector(0.1, 0.1, 0.1)]\n\n blobs = VortexBlobs(circulation, radius, source)\n\n\n\n\n\n","category":"type"},{"location":"#VEM.circulation_type-Tuple{VortexBlobs}","page":"Home","title":"VEM.circulation_type","text":"circulation_type(blobs::VortexBlobs)\n\nDetermine the type of the circulation carried by a blob.\n\nExample\n\njulia> circulation_type(blobs::VortexBlobs{2, Float32})\nFloat32\n\njulia> circulation_type(blobs::VortexBlobs{3, Float16})\nSVector{3, Float16}\n\n\n\n\n\n","category":"method"},{"location":"#VEM.compute_field!-Tuple{Any, Any, VortexBlobs, Any}","page":"Home","title":"VEM.compute_field!","text":"compute_field!(field, kernel, blobs, targets)\n\nIn-place version of compute_field.\n\nThe induced field is stored in field. The output type of kernel must be compatible with eltype(field).\n\n\n\n\n\n","category":"method"},{"location":"#VEM.compute_field-Tuple{Any, VortexBlobs, Any}","page":"Home","title":"VEM.compute_field","text":"compute_field(kernel, blobs, targets)\n\nCompute a field defined by kernel induced by a distribution of blobs at targets.\n\nThe induced field is specified by a kernel function. The kernel computes the induction due to a single blob at a single target. The dimension of the output must be defined by extending kernel_output_size for the type of the kernel function. It should take kernel as input and return a StaticArrays.Size. Outputs of arbitrary tensor rank are supported in 2D and 3D.\n\nExample\n\nCompute the velocity due to three 2D blobs at four targets:\n\nusing LinearAlgebra\nusing StaticArrays\nusing VEM\n\nfunction velocity(circulation, radius, source, target)\n    r = target - source\n    rSq = dot(r, r)\n\n    f = cross(circulation, r)/(rSq*pi*2)\n    g = 1 - exp(-rSq/(2*radius^2))\n\n    return f*g\nend\n\nVEM.kernel_output_size(::typeof(velocity)) = Size(2)\n\ncirculations = [1.23, 4.56, 7.89]\nradii = [0.45, 0.90, 1.80]\nsources = [SVector(-3.0, 4.0), SVector(-5.0, 0.0), SVector(1.0, 2.0)] \nblobs = VortexBlobs(circulations, radii, sources)\n\ntargets = [SVector(3.0, 5.0), SVector(-3.0, 5.0), SVector(-3.0, -5.0), SVector(3.0, -5.0)]\n\nvelocity_field = compute_field(velocity, blobs, targets)\n\n\n\n\n\n","category":"method"},{"location":"#VEM.dimension-Tuple{VortexBlobs}","page":"Home","title":"VEM.dimension","text":"dimension_type(blobs::VortexBlobs)\n\nDetermine the dimension of a blob.\n\nExample\n\njulia> dimension(blobs::VortexBlobs{2})\n2\n\njulia> dimension_type(blobs::VortexBlobs{3})\n3\n\n\n\n\n\n","category":"method"},{"location":"#VEM.radius_type-Tuple{VortexBlobs}","page":"Home","title":"VEM.radius_type","text":"radius_type(blobs::VortexBlobs)\n\nDetermine the type of the radius of a blob.\n\nExample\n\njulia> radius_type(blobs::VortexBlobs{2, Float32})\nFloat32\n\njulia> radius_type(blobs::VortexBlobs{3, Float16})\nFloat16\n\n\n\n\n\n","category":"method"},{"location":"#VEM.scalar_type","page":"Home","title":"VEM.scalar_type","text":"scalar_type(blobs::VortexBlobs)\n\nDetermine the primitive type used for the data contained by the VortexBlobs struct.\n\nExample\n\njulia> scalar_type(blobs::VortexBlobs{2, Float32})\nFloat32\n\njulia> scalar_type(blobs::VortexBlobs{3, Float16})\nFloat16\n\n\n\n\n\n","category":"function"},{"location":"#VEM.source_type-Tuple{VortexBlobs}","page":"Home","title":"VEM.source_type","text":"source_type(blobs::VortexBlobs)\n\nDetermine the type of the source of a blob.\n\nExample\n\njulia> source_type(blobs::VortexBlobs{2, Float32})\nSVector{2, Float32}\n\njulia> source_type(blobs::VortexBlobs{3, Float16})\nSVector{3, Float16}\n\n\n\n\n\n","category":"method"}]
}
